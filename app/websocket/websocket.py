import asyncio
import json
import time
from uuid import UUID

import cv2
import numpy as np
from fastapi import APIRouter, Query
from starlette.websockets import WebSocket, WebSocketDisconnect
from typing import List

from app.services.ai_plate_service import ai_plate_service
from app.websocket.ConnectionManager import connection_manager

router = APIRouter()


@router.websocket("/stream")
async def websocket_super_admin(websocket: WebSocket,rtsp,w,h):

    await connection_manager.connect(websocket, rtsp,w,h)
    try:
        while True:
            data = await websocket.receive_json()
            # X·ª≠ l√Ω c√°c action kh√°c n·∫øu c·∫ßn
    except WebSocketDisconnect:
        await connection_manager.disconnect(websocket)


@router.websocket("/camera")
async def websocket_endpoint(websocket: WebSocket, camera_id: str):
    await websocket.accept()
    print("üîå Client ƒë√£ k·∫øt n·ªëi WebSocket")
    count_client_incremented = False
    try:
        camera_id = UUID(camera_id)
        if camera_id not in ai_plate_service.shared_memories:
            await websocket.close(code=1008, reason="Camera ID kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.")
            return
        data = ai_plate_service.shared_memories[camera_id]
        print("üîå Client ƒë√£ k·∫øt n·ªëi WebSocket", data)
        shm = data.get("shm")
        shape = data.get("shape")
        dtype = data.get("dtype")
        ready_event = data.get("ready_event")
        count_client = data.get("count_client")
        frame_np = np.ndarray(shape, dtype=dtype, buffer=shm.buf)
        # set count_client
        count_client.value += 1
        count_client_incremented = True
        target_fps = 15
        last_frame_time = 0
        frame_delay = 1.0 / target_fps

        while True:
            # Phi√™n b·∫£n kh√¥ng ch·∫∑n c·ªßa vi·ªác ƒë·ª£i event
            # Th√™m timeout ƒë·ªÉ tr√°nh treo v√¥ h·∫°n
            wait_start_time = time.time()
            max_wait_time = 5.0  # 5 gi√¢y timeout

            while not ready_event.is_set():
                # Ki·ªÉm tra n·∫øu ƒë√£ ƒë·ª£i qu√° l√¢u
                if time.time() - wait_start_time > max_wait_time:
                    print("‚ö†Ô∏è Timeout ƒë·ª£i frame m·ªõi t·ª´ camera")
                    # G·ª≠i th√¥ng b√°o l·ªói ho·∫∑c frame tr·ªëng cho client
                    await websocket.send_text(json.dumps({"error": "Camera timeout"}))
                    await asyncio.sleep(1)  # ƒê·ª£i 1 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
                    break
                await asyncio.sleep(0.01)  # Sleep ng·∫Øn ƒë·ªÉ kh√¥ng ch·∫∑n event loop

            # N·∫øu ch·ªù qu√° l√¢u th√¨ ti·∫øp t·ª•c v√≤ng l·∫∑p
            if time.time() - wait_start_time > max_wait_time:
                continue

            frame_copy = frame_np.copy()
            ready_event.clear()  # Reset c·ªù

            current_time = time.time()
            time_elapsed = current_time - last_frame_time

            if time_elapsed < frame_delay:
                await asyncio.sleep(frame_delay - time_elapsed)
                continue

            last_frame_time = time.time()

            if frame_copy is not None:
                ret, buffer = cv2.imencode('.jpg', frame_copy)
                await websocket.send_bytes(buffer.tobytes())

            await asyncio.sleep(0.01)

    except WebSocketDisconnect:
        print("‚ö†Ô∏è WebSocket b·ªã ng·∫Øt k·∫øt n·ªëi")
    except Exception as e:
        print(f"‚ùå L·ªói WebSocket: {str(e)}")
    finally:
        # ƒê·∫£m b·∫£o gi·∫£m counter cho d√π c√≥ l·ªói x·∫£y ra
        if count_client_incremented and 'count_client' in locals():
            count_client.value -= 1